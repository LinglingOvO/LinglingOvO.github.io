<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ 重修之旅（一）</title>
      <link href="/2025/03/06/C++%20%E9%87%8D%E4%BF%AE%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/03/06/C++%20%E9%87%8D%E4%BF%AE%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="note pink anzhiyufont anzhiyu-icon-dengpao flat"><p>最近，想养成一个能坚持下去的习惯，于是就想到了刷算法题，我接触比较早且掌握还可以的一门编程语言就是C++，但在打开随机一题之后，发现函数中的 vector&lt;int&gt;是什么意思我完全没有印象了😣，脑海里只有数组、容器这两个关键词，所以就想重新复习一下 C++。然后在 b站上找到了 Cherno 的 C++ 系列课程，每看完一个小节都感觉自己对 C++有了新的认识，也学习到了很多技巧，大佬是真的厉害啊😎（希望自己在将来也能这么厉害）</p></div><hr><h2 id="1-c-编译器的工作过程">1 C++ 编译器的工作过程</h2><p>当我们编写好了一些 C++ 代码（.cpp文件）之后，就需要利用编译器将其变成机器可运行的二进制文件（.exe文件）。</p><h3 id="11-预处理">1.1 预处理</h3><p><strong>首先</strong>，编译器在收到 .cpp文件后，会优先处理其中的预处理语句，即预处理发生在编译之前。一般来说，‘#’之后的都是预处理语句。</p><h4 id="111-include-语句">1.1.1 #include 语句</h4><p>其中，最常用的预处理语句就是 #include &lt;xxx&gt;，其会将 xxx文件中的所有内容复制粘贴到当前文件中。</p><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><ol type="1"><li><a href="https://www.cnblogs.com/yutian-blogs/p/17492899.html">#include&lt;&gt;和 #include“” 的区别</a></li><li>iostream 是一个没有扩展名的文件，这是为了区分 C++ 标准库和 C标准库，C 标准库会有 .h 扩展，但 C++ 标准库没有扩展。</li></ol></div><div class="note green anzhiyufont anzhiyu-icon-fan flat"><p>一个奇怪的 Example：</p></div><p>头文件 endBrace.h 中的内容如下（只有一个右花括号）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">}</span><br></pre></td></tr></table></figure><p>而在 main.cpp 文件中的内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">std::cout &lt;&lt; <span class="string">"hello"</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"endBrace.h"</span></span></span><br></pre></td></tr></table></figure><p>该程序虽然看着很奇怪，但可以正常编译并运行，其输出如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="112-if-预处理语句">1.1.2 #if 预处理语句</h4><p>#if 预处理语句可以让我们包含或排除基于给定条件的代码。</p><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p>用编译器输出一个包含所有预处理器情况的文件的方法：项目属性 ➡️C/C++中的预处理器 ➡️ 预处理到文件的选项切换到‘是’➡️再次编译后，打开文件夹目录 ➡️ 在新生成的 .i文件中就可以查看预处理器实际上生成的内容。（在查看之后要记得关闭，否则就不会生成.obj 文件了）</p></div><div class="note green anzhiyufont anzhiyu-icon-fan flat"><p>Example：</p></div><p>新建 add.cpp 文件，其内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>编译 add.cpp 后查看生成的 add.i 文件，内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">line</span> 1 <span class="string">"C:\\Users\\lingling\\Desktop\\test\\Project1\\add.cpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">line</span> 6 <span class="string">"C:\\Users\\lingling\\Desktop\\test\\Project1\\add.cpp"</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 add.cpp 的内容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>重新编译，再查看 add.i 文件新生成的内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">line</span> 1 <span class="string">"C:\\Users\\lingling\\Desktop\\test\\Project1\\add.cpp"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">line</span> 6 <span class="string">"C:\\Users\\lingling\\Desktop\\test\\Project1\\add.cpp"</span></span></span><br></pre></td></tr></table></figure><h3 id="12-编译">1.2 编译</h3><p><strong>然后</strong>，才开始进行编译。C++编译器将编译主要分为了编译和链接两个阶段。</p><p>若对整个项目进行编译 build，则编译器对于项目中的每一个 .cpp文件都会生成一个后缀为 .obj 的目标文件。</p><p>在这一过程中，编译器会将 .cpp文件视为一个<strong>翻译单元</strong>，根据这个翻译单元从而产生一个 .obj文件。注意，此时文件本身的意义并不重要，即一个 .cpp文件不一定等于一个翻译单元。</p><h3 id="13-链接">1.3 链接</h3><p>通过编译生成的 .obj文件之间是没有关联的，无法进行交互，如函数调用等，所以需要 Linker对这些目标文件进行链接。 Linker 的基本功能就是将所有的 .obj文件“黏合”到一起合并成一个.exe 可执行文件。</p><h4 id="131-区分编译错误和链接错误">1.3.1 区分编译错误和链接错误</h4><p>首先，要明确的是在 Visual Studio 中的错误列表 Error List只能当作一个参考，如果需要更加具体的错误信息，还是需要查看输出 Output窗口。 而如果在程序中出现了语法错误，在输出窗口中就会看见以 errorc…：开头的错误，表示该错误发生在编译阶段；如果出现了 errorLNK：开头的错误，则表示错误发生在链接阶段。</p><h4 id="132-避免链接错误">1.3.2 避免链接错误</h4><h5 id="static">static</h5><p>add.cpp 中的内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>在 add 函数定义之前加上 static，会意味着此处的 add 函数只被声明在add.cpp 文件中，即无法从外部的文件，如 main.cpp 中调用 add 函数。</p><h5 id="头文件监督">头文件监督</h5><p>在 include头文件时可能会由于多次引用相同的头文件而产生链接错误，为避免这种错误，有如下方法：</p><ol type="1"><li>在头文件的第一行添加 <strong>#pragma once</strong></li><li>利用 #ifndef、#define、#endif</li></ol><hr><h2 id="2-基本语法">2 基本语法</h2><h3 id="21-指针">2.1 指针</h3><div class="note red anzhiyufont anzhiyu-icon-fan flat"><p>只需要记住一句话：指针是一个整数，一个存储内存地址的整数。</p></div><p>指针对于管理和操纵内存十分重要。</p><p>在学习指针时，要先忘记指针的类型，明确<strong>所有类型的指针都是一个保存内存地址的整数</strong>。指针就像变量一样，但它不是像其他变量那样保存值本身，而是保存一个内存地址，但这个内存地址本身也是一个值、一个整数。</p><p>而指针的类型，只是说这个地址的数据为我们所给的类型，除此之外，指针的类型没有任何意义，类型的不同不会改变指针的值。</p><h4 id="211-创建空指针">2.1.1 创建空指针</h4><ol type="1"><li>void* ptr = 0;</li><li>void* ptr = NULL;</li><li>void* ptr = nullptr; 其中，NULL 是一种宏定义，即 #define NULL 0。而nullptr 是 C++ 中的关键字。</li></ol><h4 id="212-在堆上创建数据">2.1.2 在堆上创建数据</h4><p>在写代码时，通常都是直接在栈上创建数据，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> var = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span>* ptr = var;</span><br></pre></td></tr></table></figure><p>我们也可以在堆上创建数据，即手动开辟内存：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">char</span>* buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">delete</span>[] buffer; <span class="comment">// 在程序结束之前，要删除申请的内存</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>其中，memset的作用是使用指定的值来填充申请的内存块。其第一个参数是一个指针，即内存块开始的指针；第二个参数是填充值；第三个参数是填充的字节大小。</p><p>结果如下图所示： <img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250306165944724.png" alt="image.png"></p><h4 id="213-多级指针">2.1.3 多级指针</h4><p>由于指针本身也是变量，也存储在内存中，所以基于此可以得到指向指针的指针。</p><p><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250305175015630.png" alt="image.png"></p><p><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250305175304013.png" alt="image.png"></p><p><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250305175320148.png" alt="image.png"></p><h3 id="22-引用">2.2 引用</h3><p>引用的作用是给现有的变量创建别名，其本身并不是新的变量，不占用内存，没有真正的存储空间。</p><div class="note red anzhiyufont anzhiyu-icon-bullhorn flat"><p>注意：一旦声明了一个引用，就<strong>无法再改变它引用的变量</strong>。这也意味着，在声明引用时，需要<strong>赋初值</strong>。</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = a;</span><br><span class="line">ref = b;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl; <span class="comment">// 输出为 8</span></span><br><span class="line">std::cout &lt;&lt; b &lt;&lt; std::endl; <span class="comment">// 输出为 8</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="221-利用引用修改变量的值">2.2.1 利用引用修改变量的值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = a;</span><br></pre></td></tr></table></figure><p>这里为变量 a 创建了一个别名 ref，ref不是一个真正的变量，在编译之后不会得到 a 和 ref 两个变量，只会得到a。</p><p>注意：此处的 &amp; 是变量声明的一部分，并不是只要看见 &amp;就是取地址，要注意上下文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = a;</span><br><span class="line">ref = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; a; <span class="comment">// 输出为 2</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>可以通过修改 ref 的值来修改 a 的值。</p><h4 id="222-引用传参">2.2.2 引用传参</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">plus</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">value++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">plus</span>(a);</span><br><span class="line">std::cout &lt;&lt; a; <span class="comment">// 输出为 5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>在调用 plus 函数时，只会将 a 的值复制到 value中，而不会影响到真正的变量 a。</p><p>此时，就可以通过引用来传递参数，从而影响到变量 a。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">plus</span><span class="params">(<span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">value++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">plus</span>(a);</span><br><span class="line">std::cout &lt;&lt; a; <span class="comment">// 输出为 6</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>当然，也可以使用指针来影响变量 a：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">plus</span><span class="params">(<span class="type">int</span>* value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">(*value)++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">plus</span>(&amp;a);</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><hr><h2 id="3-tips">3 Tips</h2><ol type="1"><li>在 debug时，可以在循环语句外设置一个断点，然后点击继续运行，这样就可以快速跳出循环语句继续debug。</li><li>条件分支语句与内存：当我们运行程序时，整个程序及其所有模块都会加载到内存中，而在使用if else、switch case等条件分支语句时，会使程序跳转到内存的不同地方并从该处开始执行指令，这意味着在大量使用if else语句时通常会有较大的内存开销。如果想写效率更高的代码，要尽量避免使用 ifelse 等条件分支语句，或尝试用数学运算代替条件分支语句。</li><li>else if 不是 C++中的关键字。注意，下面两个程序的输出结果是一样的。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ptr = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">std::cout &lt;&lt; ptr;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr == <span class="string">"Hello"</span>)</span><br><span class="line">std::cout &lt;&lt; <span class="string">"Ptr is Hello!"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ptr = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">std::cout &lt;&lt; ptr;</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="string">"Hello"</span>)</span><br><span class="line">std::cout &lt;&lt; <span class="string">"Ptr is Hello!"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>在 Visual Studio 的解决方案资源管理器中的 “一堆文件夹”不是真正的文件夹，而是<strong>过滤器</strong>，这些过滤器在磁盘上并不存在，添加或删除过滤器不会改变磁盘中实际文件夹的内容，过滤器的作用只是为了更好地组织源代码。（在过滤器目录上方的小工具栏中点击查看所有文件，即可切换到实际文件夹的目录结构，此时就可以在资源管理器中创建文件夹，而不是过滤器）</li><li>bool 变量占 1 个 byte 的大小，而不是一个 bit。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian 软件学习</title>
      <link href="/2025/02/15/Obsidian%20%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/15/Obsidian%20%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-obsidian-的使用技巧">1 Obsidian 的使用技巧</h2><h3 id="11-标注">1.1 标注</h3><p>标注是 Obsidian 中特有的语法，用于美化内容。</p><blockquote><p>注意：在复制粘贴含有标注语法的内容到其他 .md文件时，标注语法会失效。</p></blockquote><h4 id="111-创建标注">1.1.1 创建标注</h4><ol type="1"><li>可以利用鼠标的右键菜单来插入标注。</li><li>将  <code>[!info]</code>  添加到引用块的第一行。其中 <code>info</code>  是 <em>类型标识符</em>。类型标识符决定了标注的外观，且类型标识符不区分大小写，但部分类型有别名。要查看所有可用类型，可以参阅<a href="https://publish.obsidian.md/help-zh/%E7%BC%96%E8%BE%91%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96/%E6%A0%87%E6%B3%A8#%E6%94%AF%E6%8C%81%E7%9A%84%E7%B1%BB%E5%9E%8B">支持的类型</a>。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [!question] 标注的标题</span><br><span class="line">&gt; 标注的内容（内容可省略）</span><br></pre></td></tr></table></figure><p>示例输出：</p><blockquote><p>[!question] 标注的标题 标注的内容（内容可省略）</p></blockquote><h4 id="112-可折叠标注--">1.1.2 可折叠标注  </h4><p>可以通过在类型标识符后添加加号（+）或减号（-）来使标注可折叠。加号表示标注默认展开，减号表示标注收起。</p><p>示例（以减号为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [!question]- 可折叠标注</span><br><span class="line">&gt; 标注的内容。</span><br></pre></td></tr></table></figure><p>示例输出：</p><blockquote><p>[!question]- 可折叠标注 标注的内容。</p></blockquote><h4 id="113-嵌套标注--">1.1.3 嵌套标注  </h4><p>可以多层嵌套标注。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [!question] 标注的标题 1</span><br><span class="line">&gt; &gt; [!todo] 标注的标题 2</span><br><span class="line">&gt; &gt; &gt; [!example]  标注的标题 3</span><br></pre></td></tr></table></figure><p>示例输出：</p><blockquote><p>[!question] 标注的标题 1</p><blockquote><p>[!todo] 标注的标题 2</p><blockquote><p>[!example] 标注的标题 3</p></blockquote></blockquote></blockquote><h3 id="12-双链">1.2 双链</h3><p>Obsidian的真正力量在于能将笔记相互链接起来。这样就可以通过理解笔记之间的关系，加深对知识的记忆并形成更深入的见解。</p><p>在编写文章时，用到了之前记录过的某个关键词，如：本项目中用到了极大极小算法。此处的极大极小算法就可以建立链接，来链接到之前的笔记。比较经典的例子就是<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5">维基百科</a>。</p><p>此外，即使没有创建目标笔记，也可以先创建一个笔记链接，在点击该链接后会自动创建一个空文件，之后进行内容补充即可。</p><h4 id="121-创建笔记链接-666">1.2.1 创建笔记链接 <sup>^666</sup></h4><p>可以使用双方括号语法，来直接链接到某一整篇笔记。</p><ul><li>语法：<code>[[某篇笔记标题]]</code></li><li>在阅读模式下，鼠标移动到链接处即可显示链接的笔记内容。</li><li>在编辑模式下，按下 Ctrl 键再将鼠标移动到链接处即可显示内容。</li></ul><h4 id="122-创建内容链接">1.2.2 创建内容链接</h4><p>若只想链接到某篇笔记的某个<strong>标题</strong>，可以在链接的笔记标题后加上<code>#</code>，此时会显示出该篇笔记中的所有标题信息，根据需要进行选择即可。</p><ul><li>语法：<code>[[Obsidian 软件学习#Obsidian 的使用技巧]]</code></li><li>示例输出：[[Obsidian 软件学习#Obsidian 的使用技巧]]</li></ul><p>如果没有设置笔记标题或只想链接到笔记中的<strong>某段内容</strong>，也可以在链接的笔记标题后加上<code>#^</code>，此时会显示出该篇笔记的所有段落，根据需要进行选择即可，之后Obsidian 会同时在<code>#^</code>和选中的段落后生成一个编号。</p><blockquote><p>注意：编号可以自行更改，但要保证两处编号是相同的，否则会出现错误。</p></blockquote><ul><li>语法：<code>[[Obsidian 软件学习#^666]]</code></li><li>示例输出：[[Obsidian 软件学习#^666]]</li></ul><h4 id="123-创建链接别名">1.2.3 创建链接别名</h4><ul><li>语法：<code>[[Obsidian 软件学习#Obsidian 的使用技巧 |芜湖]]</code></li><li>示例输出：[[Obsidian 软件学习#1 Obsidian 的使用技巧|芜湖]]</li></ul><h4 id="124-提取链接内容">1.2.4 提取链接内容</h4><p>若想让链接到的内容在当前页面直接展示出来，需要在[[]]的前方加上一个!</p><ul><li>语法：<code>![[Obsidian 软件学习#创建链接别名]]</code></li><li>示例输出：![[Obsidian 软件学习#1.2.3 创建链接别名]]</li></ul><blockquote><p>注意：在 Obsidian中，一个仓库下的所有笔记之间是可以进行链接的，但在不同仓库之间的笔记是无法进行链接的。</p></blockquote><h3 id="13-英语学习">1.3 英语学习</h3><h4 id="131-工作流">1.3.1 工作流</h4><ol type="1"><li>利用卡片（Spaced Repetition 插件）复习学过的单词</li><li>搜集英语文章（<a href="https://space.bilibili.com/597074962">三言两语杂货社</a>）</li><li>创建笔记，插入英语文章阅读模板，粘贴文章到指定位置</li><li>切换到 Language Learner插件的阅读模式，跟着视频学习。在此时的文章中，用浅蓝色高亮的单词表示未学习过的单词，而对于特别简单的单词（如：I、go、to等）可以先不用标记提交，在学习完不认识的单词后，点击结束阅读即可在之后的文章中无视它们。</li><li>在结束阅读之后，需要对单词数据库 wordDB.md进行更新，即运行命令<code>Language Learner：刷新单词数据库</code>，这样就会将学习过的单词从数据库导入到该笔记（单词数据库）中，然后再运行命令<code>Various Complements: Reload custom dictionaries</code>，这样Various Complements 插件就可以实现基于单词数据库 wordDB.md的自动补全，“学以致用”。</li><li>最后，要进行复习数据库 reviewDB.md的更新，即在该文件中运行命令<code>Language Learner：刷新复习数据库</code>，之后在第二天复习卡片即可。</li></ol><h2 id="2-obsidian-的第三方插件">2 Obsidian 的第三方插件</h2><h3 id="21-annotator">2.1 <a href="https://github.com/elias-sundqvist/obsidian-annotator">Annotator</a></h3><ul><li>功能：在 Obsidian 中可以阅读、注释和高亮 PDF 和 EPUB 文件，相较于Obsidian 自带的 PDF 文件阅读，增加了注释和高亮功能。</li><li>使用方式：<ol type="1"><li>在笔记属性中加入 <code>annotation-target: PDF文件路径</code></li><li>在右上角的更多选项（三个点的图标）中点击 Annotate</li></ol></li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250216001952357.gif" alt="131702952-1aa76baa-a279-474c-978d-cec95a683485.gif"></li></ul><h3 id="22-auto-link-title">2.2 <a href="https://github.com/zolrath/obsidian-auto-link-title">Auto LinkTitle</a></h3><ul><li>功能：打开插件后，在粘贴链接时会自动获取网页以提取标题，并创建具有该标题的markdown 语法链接。</li><li>示例：<ul><li>复制链接：<code>https://github.com/zolrath/obsidian-auto-link-title</code></li><li>粘贴结果：<code>[GitHub - zolrath/obsidian-auto-link-title: Automatically fetch the titles of pasted links](https://github.com/zolrath/obsidian-auto-link-title)</code></li></ul></li></ul><p><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215031654779.gif" alt="auto-link-title.gif"></p><h3 id="23-better-export-pdf">2.3 <a href="https://github.com/l1xnan/obsidian-better-export-pdf">BetterExport PDF</a></h3><ul><li>功能：相较于 Obsidian 自带的 PDF导出功能，该插件新增了书签目录导出、预览导出以及为 PDF添加页码的功能。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215193938838.png" alt="preview1.png"></li></ul><h3 id="24-brat">2.4 <a href="https://github.com/TfTHacker/obsidian42-brat">BRAT</a></h3><ul><li>BRAT：Beta Reviewers Auto-update Tool</li><li>功能：利用该插件可以下载在 Obsidian社区插件市场中找不到的插件。</li><li>使用方式：<ol type="1"><li>复制目标插件的 Github 仓库地址</li><li>在 BRAT 的设置中点击 Add Beta Plugin，然后粘贴即可</li></ol></li></ul><h3 id="25-commander">2.5 <a href="https://github.com/phibr0/obsidian-commander">Commander</a></h3><ul><li>功能：安装插件之后，可以在 Obsidian 用户界面的不同部分添加 /隐藏命令。<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215195401180.png" alt="image.png"></li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215195529973.gif" alt="180301683-080256c4-84f9-4a2f-9b1c-f97af694683e.gif"></li></ul><h3 id="26-editing-toolbar">2.6 <a href="https://github.com/PKM-er/obsidian-editing-toolbar">EditingToolbar</a></h3><ul><li>功能：该插件提供了类似于 Word的工具栏，且可以和其他插件联合使用。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215203330012.gif" alt="editing-toolbar-demo.gif"></li></ul><h3 id="27-emoji-toolbar">2.7 <a href="https://github.com/oliveryh/obsidian-emoji-toolbar">EmojiToolbar</a></h3><ul><li>功能：可以快速查找 emoji 表情并添加到笔记中。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215203800582.gif" alt="demo.gif"></li></ul><h3 id="28-excalidraw">2.8 <a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">Excalidraw</a></h3><ul><li>功能：该插件将  <a href="https://excalidraw.com/">Excalidraw</a> 这一功能丰富的草图工具集成到 Obsidian 中。以便可以在库中存储和编辑Excalidraw 文件，且可以将图形嵌入到文档中，还可以在 Excalidraw中链接到文档和其他图片。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215204245443.png" alt="image.png"></li></ul><h3 id="29-file-explorer-note-count">2.9 <a href="https://github.com/ozntel/file-explorer-note-count">File ExplorerNote Count</a></h3><ul><li>功能：可以在 Obsidian 的文件列表中查看所有文件夹下的元素数量。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215204429348.png" alt="image.png"></li></ul><h3 id="210-highlightr">2.10 <a href="https://github.com/chetachiezikeuzor/Highlightr-Plugin">Highlightr</a></h3><ul><li>功能：可以快速高亮文本，且颜色和样式可以自行更改。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215205122137.gif" alt="142739125-dad73e22-c6c4-4c49-8367-3e5a278659e7.gif"></li></ul><h3 id="211-hover-editor">2.11 <a href="https://github.com/nothingislost/obsidian-hover-editor">HoverEditor</a></h3><ul><li>功能：悬浮编辑器，可以实现在 Obsidian 中的多窗口打开（窗口只能在Obsidian 的屏幕中，无法移动出去）</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215210300495.png" alt="image.png"></li></ul><h3 id="212-iconize">2.12 <a href="https://github.com/FlorianWoelki/obsidian-iconize">Iconize</a></h3><blockquote><p>注意：该项目将于 2025 年 3 月 1 日起弃用并结束维护</p></blockquote><ul><li>功能：该插件可以添加图标包中的图标或任何自定义图标到任何文件。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215210705824.png" alt="image.png"></li></ul><h3 id="213-image-auto-upload-plugin">2.13 <a href="https://github.com/renmu123/obsidian-image-auto-upload-plugin">ImageAuto Upload Plugin</a></h3><ul><li>功能：该插件支持使用 PicGo、PicList、PicGo-Core上传图片到图床。</li></ul><h3 id="214-kanban">2.14 <a href="https://github.com/mgmeyers/obsidian-kanban">Kanban</a></h3><ul><li>功能：可以在 Obsidian 中创建支持 Markdown 语法的看板。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215211512737.png" alt="image.png"></li></ul><h3 id="215-language-learner">2.15 <a href="https://github.com/guopenghui/obsidian-language-learner">LanguageLearner</a></h3><ul><li>功能：该插件可用于英语学习。</li><li>使用教程：<a href="https://www.bilibili.com/video/BV1914y1Y7mT/?vd_source=da45f18dba6b91214e4e0aba9c26992c">ObsidianLanguage Learner 基本教程</a></li></ul><h3 id="216-link-favicon">2.16 <a href="https://github.com/joethei/obsidian-link-favicon">LinkFavicon</a></h3><ul><li>功能：此插件可以无需使用任何自定义 CSS即可看到链接网站的图标，且该图标可以自定义。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215211745866.png" alt="image.png"></li></ul><h3 id="217-local-gpt">2.17 <a href="https://github.com/pfrankov/obsidian-local-gpt">Local GPT</a></h3><ul><li>功能：可以在 Obsidian 中调用本地的AI，实现最大程度的隐私和离线访问。该插件允许在选定文本时打开命令面板以选择AI 助手的操作。</li><li>部署本地 AI 教程：<a href="https://www.bilibili.com/video/BV182421Z79w/?spm_id_from=333.788.videopod.sections&amp;vd_source=da45f18dba6b91214e4e0aba9c26992c">如何在Obsidian 中，通过一套本地化 AI 进行写作？</a></li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215215651927.png" alt="image.png"></li></ul><h3 id="218-media-extended">2.18 <a href="https://github.com/aidenlx/media-extended">Media Extended</a></h3><ul><li>功能：该插件可以直接标记视频的时间戳、进行截图，快速生成笔记。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215221918339.png" alt="image.png"></li></ul><h3 id="219-mysnippets">2.19 <a href="https://github.com/chetachiezikeuzor/MySnippets-Plugin">MySnippets</a></h3><ul><li>功能：添加了一个状态栏菜单，允许用户在工作空间内即可快速打开或关闭CSS代码片段，避免了用户不断地在工作区和设置选项卡之间来回切换，只是为了打开和关闭它们。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215224848350.gif" alt="144683686-b8cfd625-e864-489d-8d0b-2fc36b7bd260.gif"><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215224827597.gif" alt="144683712-42da2acf-97f5-4987-9e9d-65b49560b9ec.gif"></li></ul><h3 id="220-number-headings">2.20 <a href="https://github.com/onlyafly/number-headings-obsidian">NumberHeadings</a></h3><ul><li>功能：在 Obsidian中自动对文档中的标题进行大纲样式编号，例如，1.1，1.1.2 等。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215225658301.png" alt="image.png"></li></ul><h3 id="221-pandoc">2.21 <a href="https://github.com/OliverBalfour/obsidian-pandoc">Pandoc</a></h3><ul><li>功能：该插件可将 Obsidian 中的笔记导出为多种格式，包括 Word文档、PDF、ePub 书籍、HTML 网站、PowerPoint 和 LaTeX 等格式。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215230013897.png" alt="image.png"></li></ul><h3 id="222-quick-explorer">2.22 <a href="https://github.com/pjeby/quick-explorer">Quick Explorer</a></h3><ul><li>功能：通过点击笔记的路径标题快速切换到其他笔记。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215231457593.png" alt="image.png"></li></ul><h3 id="223-recent-files">2.23 <a href="https://github.com/tgrosinger/recent-files-obsidian">RecentFiles</a></h3><ul><li>功能：此插件在左侧边栏中会显示最近打开的文件列表。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215231924937.png" alt="image.png"></li></ul><h3 id="224-spaced-repetition">2.24 <a href="https://github.com/st3v3nmw/obsidian-spaced-repetition">SpacedRepetition</a></h3><ul><li>功能：在 Obsidian中使用间隔重复法复习卡片和笔记，克服遗忘曲线。</li><li>使用教程：<ol type="1"><li>官方文档：<a href="https://www.stephenmwangi.com/obsidian-spaced-repetition/">ObsidianSpaced Repetition</a></li></ol></li></ul><h3 id="225-typewriter-scroll">2.25 <a href="https://github.com/deathau/cm-typewriter-scroll-obsidian">TypewriterScroll</a></h3><ul><li>功能：使视图一直保持在编辑器的中心。</li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215232622434.gif" alt="screenshot.gif"></li></ul><h3 id="226-timeline">2.26 <a href="https://github.com/George-debug/obsidian-timeline">Timeline</a></h3><ul><li>功能：在编辑文本时可以创建时间线。</li><li>示例：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`timeline</span><br><span class="line">[line-3, body-2]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> pre<span class="language-xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span> 17th century</span><br><span class="line"><span class="bullet">-</span> Origins of coffee</span><br><span class="line"><span class="bullet">-</span> The modern version of roasted coffee originated in Arabia. During the 13th century, coffee was extremely popular with the Muslim community for its stimulant powers, which proved useful during long prayer sessions. By parching and boiling the coffee beans, rendering them infertile, the Arabs were able to corner the market on coffee crops. In fact, tradition says that not a single coffee plant existed outside of Arabia or Africa until the 1600s, when Baba Budan, an Indian pilgrim, left Mecca with fertile beans fastened to a strap across his abdomen. Baba’s beans resulted in a new and competitive European coffee trade.</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 17th century</span><br><span class="line"><span class="bullet">-</span> Europe and coffee</span><br><span class="line"><span class="bullet">-</span> In 1616, the Dutch founded the first European-owned coffee estate in Sri Lanka, then Ceylon, then Java in 1696. The French began growing coffee in the Caribbean, followed by the Spanish in Central America and the Portuguese in Brazil. European coffee houses sprang up in Italy and later France, where they reached a new level of popularity. Now, it is de <span class="emphasis">*rigueur*</span> for Parisians to indulge in a cup of coffee and a baguette or croissant at the numerous coffee cafes throughout Paris.</span><br><span class="line">  \<span class="code">`\`</span>\`</span><br></pre></td></tr></table></figure><p><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250215233616809.gif" alt="180435506-7d51bec3-0cc8-48b1-9f22-24199c988dbf.gif"></p><h3 id="227-various-complements">2.27 <a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin">VariousComplements</a></h3><ul><li>功能：该插件会基于库中的笔记或自定义的字典进行智能搜索，从而让用户在输入时可以自动补全内容。</li><li>使用教程：<ol type="1"><li>视频教程：<a href="https://www.bilibili.com/video/BV1p841177Zg?spm_id_from=333.788.videopod.sections&amp;vd_source=da45f18dba6b91214e4e0aba9c26992c">OB插件 Various Complements</a></li><li>官方文档：<a href="https://tadashi-aikawa.github.io/docs-obsidian-various-complements-plugin/">VariousComplements</a></li></ol></li><li>示例：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250216021852915.gif" alt="68747470733a2f2f746164617368692d61696b6177612e6769746875622e696f2f646f63732d6f6273696469616e2d766172696f75732d636f6d706c656d656e74732d706c7567696e2f7265736f75726365732f766172696f75732d636f6d706c656d656e74732e67696.gif"></li></ul><blockquote><p>Using the right tool for the right job.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/13/hello-world/"/>
      <url>/2025/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><div class="note red anzhiyufont anzhiyu-icon-fan flat"><p>这是三片呢？还是四片？</p></div><p><i class="fa-solid fa-fan"></i></p><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><blockquote><p>提示：如果事情没有按预期出现，请仔细检查你是否已将列表中的元素缩进了四个空格或一个制表符。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法学习</title>
      <link href="/2025/02/12/Markdown%20%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/12/Markdown%20%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>：本文是对个人的 Markdown语法知识进行复习或补充。有关 Markdown语法的具体内容，可以查看参考资料中的文档。</p></blockquote><h2 id="1-基础语法">1 基础语法</h2><h3 id="11-斜体">1.1 斜体</h3><ul><li>语法：<code>*斜体*</code></li><li>示例输出：<em>斜体</em></li></ul><h3 id="12-粗斜体">1.2 粗斜体</h3><ul><li>语法：<code>***粗斜体***</code></li><li>示例输出：<strong><em>粗斜体</em></strong></li></ul><h3 id="13-引用">1.3 引用</h3><ul><li>语法：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用语法</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; 引用语法</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 引用语法</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; &gt; 引用语法</span></span><br></pre></td></tr></table></figure><ul><li>示例输出：<blockquote><p>引用语法</p><blockquote><p>引用语法</p><blockquote><p>引用语法</p><blockquote><p>引用语法</p></blockquote></blockquote></blockquote></blockquote></li></ul><h3 id="14-高亮">1.4 高亮</h3><ul><li>语法：<code>==想要高亮的内容==</code></li><li>示例输出：==想要高亮的内容==</li></ul><h3 id="15-删除线">1.5 删除线</h3><ul><li>语法：<code>~~想要设置删除线的内容~~</code></li><li>示例输出：<del>想要设置删除线的内容</del></li></ul><h3 id="16-下划线">1.6 下划线</h3><ul><li>HTML 语法：<code>&lt;u&gt;想要设置下划线的内容&lt;/u&gt;</code></li><li>示例输出：<u>想要设置下划线的内容</u></li></ul><h3 id="17-编写行内代码">1.7 编写行内代码</h3><p>如果要编写行内代码或在短语中包含一个或多个反引号，可以用双反引号 (``)将代码或短语括起来，也可以使用 HTML 语法。</p><ul><li>语法：<ol type="1"><li>Markdown 形式：``在你的 Markdown 文件中使用 `code`。``</li><li>HTML形式：<code>&lt;code&gt;在你的 Markdown 文件中使用 `code`。&lt;/code&gt;</code></li></ol></li><li>示例输出：在你的 Markdown 文件中使用  <code>code</code>。</li></ul><h3 id="18-上下标">1.8 上下标</h3><ul><li>HTML语法：<code>H&lt;sub&gt;2&lt;/sub&gt;O</code>，<code>X&lt;sup&gt;2&lt;/sup&gt;</code></li><li>示例输出：H<sub>2</sub>O，X<sup>2</sup></li></ul><blockquote><p><strong>注意</strong>：在 Obsidian 中 Markdown的上下标语法可能不生效。</p></blockquote><h3 id="19-使用表情符号">1.9 使用表情符号</h3><p>通过键入表情符号简码来插入表情符号。这些简码以冒号 (:)开头和结尾，并包含表情符号的名称。</p><ul><li>语法：<code>:joy:</code></li><li>示例输出：😂<blockquote><p><strong>注意</strong>：通常可以使用此<a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a>，但表情符号简码可能因应用程序而异。有关更多信息，可以参阅所使用的Markdown 应用程序文档。</p></blockquote></li></ul><h3 id="110-markdown-中的-html">1.10 Markdown 中的 HTML</h3><h4 id="1101-居中">1.10.1 居中</h4><ul><li>使用 HTML 中的标签 <code>&lt;center&gt;</code>。</li><li>语法：<code>&lt;center&gt;This text is centered.&lt;/center&gt;</code></li><li>示例输出：</li></ul><center>This text is centered.</center><h4 id="1102-更改文本颜色">1.10.2 更改文本颜色</h4><ul><li>Markdown 语法不支持更改文本颜色，但可以使用 HTML 中的标签 <code>&lt;font&gt;</code>，通过修改其中的 color属性值，即可更改文本颜色。</li><li>可以使用颜色的名称或十六进制  <code>#RRGGBB</code>  代码修改 color属性的值。</li><li>语法：<code>&lt;font color="red"&gt;This text is red!&lt;/font&gt;</code></li><li>示例输出：<font color="red">This text is red!</font></li></ul><h4 id="1103-调整图像大小">1.10.3 调整图像大小</h4><ul><li>使用 HTML 中的标签 img，通过修改其 width 和 height属性来以像素为单位设置图像的尺寸。</li><li>语法：<code>&lt;img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250213040901088.jpg" width="200" height="100"&gt;</code></li><li>示例输出：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250213040901088.jpg" width="200" height="100"></li><li>原图：<img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250213040901088.jpg" alt="dog"></li></ul><h4 id="1104-符号">1.10.4 符号</h4><p>Markdown 没有为符号提供特殊语法。若想使用符号，有 2 种方式：</p><ol type="1"><li>在大多数情况下，可以将任何你想要使用的符号复制并粘贴到 Markdown文档中。</li><li>可以使用 HTML 实体来表示任何你想要使用的符号。符号的 HTML实体的部分列表如下：<ul><li>版权 (©) — <code>&amp;copy;</code></li><li>注册商标 (®) — <code>&amp;reg;</code></li><li>商标 (™) — <code>&amp;trade;</code></li><li>欧元 (€) — <code>&amp;euro;</code></li><li>左箭头 (←) — <code>&amp;larr;</code></li><li>上箭头 (↑) — <code>&amp;uarr;</code></li><li>右箭头 (→) — <code>&amp;rarr;</code></li><li>下箭头 (↓) — <code>&amp;darr;</code></li><li>度数 (°) — <code>&amp;#176;</code></li><li>圆周率 (π) — <code>&amp;#960;</code></li></ul></li></ol><h2 id="2-使用技巧">2 使用技巧</h2><h3 id="21-标题">2.1 标题：</h3><p>在文档创作中，一般采用如下的标题层级结构：</p><ol type="1"><li><code># 文章主标题</code> （一级标题，对应 Front Matter 中的 <code>title</code>  字段）</li><li><code>## 核心章节</code> （二级标题，用于主体内容划分）</li><li><code>### 子章节</code> （三级标题，用于细节内容展开）</li><li><code>#### 细分段落</code> （四级标题，建议不超过此层级）</li></ol><p>以本文档为例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Markdown 语法学习</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 1 基础语法</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1.10 Markdown 中的 HTML</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 1.10.1 居中</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>Markdown 语法最多支持 6 级标题</li><li>注意文章的层级连续性，避免出现跳级使用（如一级标题后直接使用三级标题）</li></ul></blockquote><h3 id="22-列表">2.2 列表</h3><p>Markdown 语法中，有序列表和无序列表之间可以互相嵌套使用。</p><h3 id="23-链接">2.3 链接</h3><p>可以选择为链接添加提示。当用户将鼠标悬停在链接上时，即可显示提示。</p><ul><li>语法：<code>[Google Search](https://www.google.com.hk/ "谷歌搜索")</code></li><li>示例输出：<a href="https://www.google.com.hk/" title="谷歌搜索">Google Search</a></li></ul><p>若想在图片中添加链接，可以用方括号括住图片的Markdown，然后在括号中添加链接，即嵌套使用。</p><ul><li>语法：<code>[![MyImage](https://111-1321365386.cos.ap-beijing.myqcloud.com/20250213040901088.jpg)](https://www.bing.com/search?q=%E7%8B%97)</code></li><li>示例输出：<a href="https://www.bing.com/search?q=%E7%8B%97"><img src="https://111-1321365386.cos.ap-beijing.myqcloud.com/20250213040901088.jpg" alt="MyImage"></a></li></ul><h3 id="24-缩进">2.4 缩进</h3><ul><li>HTML 语法：<ul><li><code>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;段落的第二句。</code></li><li>此处的<code>&amp;nbsp;</code>相当于空格。</li></ul></li><li>示例输出：<ul><li>    段落的第二句。</li><li>此处的 相当于空格。</li></ul></li></ul><blockquote><p><strong>注意</strong>：在编写 Markdown文档时，除非段落位于列表中，否则不要使用空格或制表符缩进段落。</p></blockquote><h2 id="3-参考资料">3 参考资料</h2><ol type="1"><li><a href="https://www.markdown.cn/docs/intro/">Markdown 文档教程(中文版)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/authorAvatar.css"/>
      <url>/css/authorAvatar.css</url>
      
        <content type="html"><![CDATA[/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/authorCardColor.css"/>
      <url>/css/authorCardColor.css</url>
      
        <content type="html"><![CDATA[/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(255, 255, 255);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;  --anzhiyu-main-op-deep: ; /*这里是额外加的*/}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/globalSetting.css"/>
      <url>/css/globalSetting.css</url>
      
        <content type="html"><![CDATA[/* #web_bg {  background: url(https://111-1321365386.cos.ap-beijing.myqcloud.com/20250224091603874.png);} *//* 菜单栏中选项字体大小的设置 */#nav .site-page {  font-size: 0.9em;}/* 个人卡片中的社交图标间距设置 */#aside-content .card-widget .card-info-social-icons .social-icon i,#aside-content .card-widget .card-info-social-icons .social-icon svg {  background: transparent;  border-radius: 14px;  padding: 6px;}#aside-content .card-widget .author-info__bottom-group {  display: -webkit-box;}/* 侧边栏中的公告图标间距设置 */#aside-content .item-headline {  margin-left: 0px;}/* 侧边栏中的网站资讯信息显示 */#aside-content .card-webinfo .item-headline {  display: flex;}/* 分类页面的背景设置 */[data-theme="dark"] div#tag {  background: transparent;}/* 减小头像的 “下巴”  */#aside-content > .card-widget.card-info > .card-content {  min-height: 200px;}/* 减小头像的 “上巴”  */#aside-content .card-info .author-info-avatar {  margin: 36px auto;}/* 减小头像中描述的 “上巴”  */#aside-content .card-widget .author-info__description {  top: 32px;}/* 关闭右键菜单中简繁切换按钮的显示  */#rightMenu .rightMenu-group.rightMenu-line #menu-translate {  display: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/pageCard.css"/>
      <url>/css/pageCard.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.7);  --trans-dark: rgba(25, 25, 25, 0.65);  --border-style: 1px solid rgb(82, 82, 82);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/neon.css"/>
      <url>/css/neon.css</url>
      
        <content type="html"><![CDATA[/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/comment.css"/>
      <url>/css/comment.css</url>
      
        <content type="html"><![CDATA[/* twikoo评论美化 *//* 自定义twikoo评论输入框高度 */#twikoo .el-textarea textarea {  min-height: 120px !important;  background-size: 90px;}/* 自定义表情优化 */#twikoo .OwO-body {  max-width: 100% !important;}/* 选择某个框 #twikoo .OwO .OwO-body .OwO-items:nth-child(1) */#twikoo .OwO .OwO-body .OwO-items {  max-height: 250px !important;}.OwO .OwO-body .OwO-items-image .OwO-item {  max-width: calc(9% - 10px);  box-sizing: content-box;}.OwO .OwO-body .OwO-items-image .OwO-item[title|="Heybox"],.OwO .OwO-body .OwO-items-image .OwO-item[title|="Tieba"],.OwO .OwO-body .OwO-items-show .OwO-item[title*="bilibili"] {  max-width: calc(7% - 10px) !important;  box-sizing: content-box;}#twikoo .OwO-items li img {  width: 100% !important;}.tk-comment .vemoji[alt|="Menhera"],.tk-comment .tk-owo-emotion[alt*="Menhera"],.tk-comment .vemoji[alt|="Snow"],.tk-comment .tk-owo-emotion[alt*="Snow"],.tk-comment .vemoji[alt|="Sweetie"],.tk-comment .tk-owo-emotion[alt*="Sweetie"],.tk-comment .vemoji[alt|="Tsuri"],.tk-comment .tk-owo-emotion[alt*="Tsuri"],.tk-comment .vemoji[alt|="Yurui"],.tk-comment .tk-owo-emotion[alt*="Yurui"] {  max-width: 120px !important;  max-height: 120px !important;  width: 120px;  margin: 8px 1px;  display: block !important;}/* 手机端适配 */@media screen and (max-width: 768px) {  .tk-comment .vemoji[alt|="Menhera"],  .tk-comment .tk-owo-emotion[alt*="Menhera"],  .tk-comment .vemoji[alt|="Snow"],  .tk-comment .tk-owo-emotion[alt*="Snow"],  .tk-comment .vemoji[alt|="Sweetie"],  .tk-comment .tk-owo-emotion[alt*="Sweetie"],  .tk-comment .vemoji[alt|="Tsuri"],  .tk-comment .tk-owo-emotion[alt*="Tsuri"],  .tk-comment .vemoji[alt|="Yurui"],  .tk-comment .tk-owo-emotion[alt*="Yurui"] {    max-width: calc(100% - 30px) !important;    max-height: calc(100% - 30px) !important;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Menhera"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Snow"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Sweetie"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Tsuri"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Yurui"] {    max-width: calc(33% - 10px);    box-sizing: border-box;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Heybox"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="bilibili"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Tieba"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="QQ"] {    max-width: calc(18% - 10px) !important;    box-sizing: content-box;  }}/* 右下角闭眼 */.el-textarea__inner {  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/open.webp) !important;}.el-textarea__inner:focus {  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/close.webp) !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/myConsole.js"/>
      <url>/js/myConsole.js</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/scrollBar.css"/>
      <url>/css/scrollBar.css</url>
      
        <content type="html"><![CDATA[/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(--theme-color);  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(--theme-color);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/windmill.css"/>
      <url>/css/windmill.css</url>
      
        <content type="html"><![CDATA[/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {    -webkit-animation: ccc 4s linear infinite;    animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}@keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}.fontawesomeIcon,hr:before,#article-container h1:before,#article-container h2:before,#article-container h3:before,#article-container h4:before,#article-container h5:before,#article-container h6:before,#post .post-outdate-notice:before,.note:not(.no-icon)::before {    display: inline-block;    font-weight: 600;    font-family: "Font Awesome 6 Free";    text-rendering: auto;    -webkit-font-smoothing: antialiased;}/* 设置风车颜色 */#content-inner.layout h1::before {    color: #ef50a8;    margin-left: -1.55rem;    font-size: 1.3rem;    margin-top: 0.65rem;}#content-inner.layout h2::before {    color: #fb7061;    margin-left: -1.35rem;    font-size: 1.1rem;    margin-top: -0.09rem;}#content-inner.layout h3::before {    color: #ffbf00;    margin-left: -1.22rem;    font-size: 0.95rem;    margin-top: -0.09rem;}#content-inner.layout h4::before {    color: #a9e000;    margin-left: -1.05rem;    font-size: 0.8rem;    margin-top: 0rem;}#content-inner.layout h5::before {    color: #57c850;    margin-left: -0.9rem;    font-size: 0.7rem;    margin-top: 0rem;}#content-inner.layout h6::before {    color: #5ec1e0;    margin-left: -0.9rem;    font-size: 0.66rem;    margin-top: 0rem;}/* 设置风车hover动效 */#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {    color: var(--theme-color) !important;}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {    color: var(--theme-color) !important;    -webkit-animation: ccc 6s linear infinite;    animation: ccc 6s linear infinite;}#article-container h1,#article-container h2,#article-container h3,#article-container h4,#article-container h5,#article-container h6 {    -webkit-transition: all 0.2s ease-out;    -moz-transition: all 0.2s ease-out;    -o-transition: all 0.2s ease-out;    -ms-transition: all 0.2s ease-out;    transition: all 0.2s ease-out;}#article-container h1:before,#article-container h2:before,#article-container h3:before,#article-container h4:before,#article-container h5:before,#article-container h6:before {    position: absolute;    top: calc(50% - 7px);    color: #f47466;    content: "\f863";    line-height: 1;    -webkit-transition: all 0.2s ease-out;    -moz-transition: all 0.2s ease-out;    -o-transition: all 0.2s ease-out;    -ms-transition: all 0.2s ease-out;    transition: all 0.2s ease-out;}#article-container h1:hover:before,#article-container h2:hover:before,#article-container h3:hover:before,#article-container h4:hover:before,#article-container h5:hover:before,#article-container h6:hover:before {    color: #49b1f5;}#article-container h1 {    padding-left: 32px;}#article-container h1:before {    /* margin-left: -26px; */    /* font-size: 20px; */}#article-container h1:hover {    padding-left: 38px;}#article-container h2 {    padding-left: 30px;}#article-container h2:before {    margin-left: -24px;    font-size: 18px;}#article-container h2:hover {    padding-left: 36px;}#article-container h3 {    padding-left: 28px;}#article-container h3:before {    margin-left: -22px;    font-size: 16px;}#article-container h3:hover {    padding-left: 34px;}#article-container h4 {    padding-left: 26px;}#article-container h4:before {    margin-left: -20px;    font-size: 14px;}#article-container h4:hover {    padding-left: 32px;}#article-container h5 {    padding-left: 24px;}#article-container h5:before {    margin-left: -18px;    font-size: 12px;}#article-container h5:hover {    padding-left: 30px;}#article-container h6 {    padding-left: 24px;}#article-container h6:before {    margin-left: -18px;    font-size: 12px;}#article-container h6:hover {    padding-left: 30px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/transparent.css"/>
      <url>/css/transparent.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {  background: transparent !important;}#page-header {  background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/theSite/index.html"/>
      <url>/theSite/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
